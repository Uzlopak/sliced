Array.prototype.slice.call x 5,797,350 ops/sec ±1.31% (87 runs sampled)
[].slice.call x 6,411,526 ops/sec ±0.67% (95 runs sampled)
cached slice.call x 6,454,722 ops/sec ±0.58% (92 runs sampled)
sliced x 4,909,607 ops/sec ±1.05% (92 runs sampled)
fastest is [ 'cached slice.call', '[].slice.call' ]
Array.prototype.slice.call(testArray, 1) x 6,951,746 ops/sec ±0.52% (97 runs sampled)
[].slice.call(testArray, 1) x 6,899,510 ops/sec ±0.48% (95 runs sampled)
cached slice.call(testArray, 1) x 6,845,316 ops/sec ±0.41% (91 runs sampled)
sliced(testArray, 1) x 4,265,869 ops/sec ±1.04% (91 runs sampled)
fastest is [
  'Array.prototype.slice.call(testArray, 1)',
  '[].slice.call(testArray, 1)'
]
Array.prototype.slice.call(testArray, -1) x 29,336,222 ops/sec ±0.38% (97 runs sampled)
[].slice.call(testArray, -1) x 29,948,498 ops/sec ±0.26% (100 runs sampled)
cached slice.call(testArray, -1) x 29,938,947 ops/sec ±0.29% (100 runs sampled)
sliced(testArray, -1) x 107,192,408 ops/sec ±0.35% (95 runs sampled)
fastest is [ 'sliced(testArray, -1)' ]
Array.prototype.slice.call(testArray, -10, -1) x 27,545,494 ops/sec ±0.31% (96 runs sampled)
[].slice.call(testArray, -10, -1) x 27,949,700 ops/sec ±0.33% (98 runs sampled)
cached slice.call(testArray, -10, -1) x 27,479,736 ops/sec ±0.27% (95 runs sampled)
sliced(testArray, -10, -1) x 45,405,119 ops/sec ±0.34% (94 runs sampled)
fastest is [ 'sliced(testArray, -10, -1)' ]
Array.prototype.slice.call(testArray, -40, -1) x 17,661,963 ops/sec ±0.49% (99 runs sampled)
[].slice.call(testArray, -40, -1) x 17,706,806 ops/sec ±0.29% (100 runs sampled)
cached slice.call(testArray, -40, -1) x 17,612,999 ops/sec ±0.55% (95 runs sampled)
sliced(testArray, -40, -1) x 13,616,217 ops/sec ±0.37% (95 runs sampled)
fastest is [
  '[].slice.call(testArray, -40, -1)',
  'Array.prototype.slice.call(testArray, -40, -1)',
  'cached slice.call(testArray, -40, -1)'
]
Array.prototype.slice.call(testArray, -2, -1) x 30,651,106 ops/sec ±0.30% (99 runs sampled)
[].slice.call(testArray, -2, -1) x 31,136,356 ops/sec ±0.41% (96 runs sampled)
cached slice.call(testArray, -2, -1) x 40,148,022 ops/sec ±5.56% (99 runs sampled)
sliced(testArray, -2, -1) x 109,177,175 ops/sec ±0.28% (100 runs sampled)
fastest is [ 'sliced(testArray, -2, -1)' ]
