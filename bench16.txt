Array.prototype.slice.call x 8,027,444 ops/sec ±2.71% (82 runs sampled)
[].slice.call x 7,282,643 ops/sec ±2.42% (85 runs sampled)
cached slice.call x 6,678,054 ops/sec ±0.58% (98 runs sampled)
sliced x 2,084,892 ops/sec ±0.45% (96 runs sampled)
fastest is [ 'Array.prototype.slice.call' ]
Array.prototype.slice.call(testArray, 1) x 6,666,796 ops/sec ±0.86% (96 runs sampled)
[].slice.call(testArray, 1) x 7,019,334 ops/sec ±0.90% (97 runs sampled)
cached slice.call(testArray, 1) x 7,064,610 ops/sec ±0.20% (100 runs sampled)
sliced(testArray, 1) x 2,136,858 ops/sec ±0.25% (98 runs sampled)
fastest is [ 'cached slice.call(testArray, 1)', '[].slice.call(testArray, 1)' ]
Array.prototype.slice.call(testArray, -1) x 34,943,928 ops/sec ±0.70% (96 runs sampled)
[].slice.call(testArray, -1) x 34,828,541 ops/sec ±0.81% (97 runs sampled)
cached slice.call(testArray, -1) x 36,215,172 ops/sec ±0.46% (99 runs sampled)
sliced(testArray, -1) x 38,468,329 ops/sec ±0.13% (98 runs sampled)
fastest is [ 'sliced(testArray, -1)' ]
Array.prototype.slice.call(testArray, -2, -10) x 43,903,829 ops/sec ±0.31% (95 runs sampled)
[].slice.call(testArray, -2, -10) x 43,797,049 ops/sec ±0.30% (99 runs sampled)
cached slice.call(testArray, -2, -10) x 43,939,006 ops/sec ±0.38% (98 runs sampled)
sliced(testArray, -2, -10) x 136,736,157 ops/sec ±0.35% (99 runs sampled)
fastest is [ 'sliced(testArray, -2, -10)' ]
Array.prototype.slice.call(testArray, -2, -1) x 35,698,130 ops/sec ±0.65% (95 runs sampled)
[].slice.call(testArray, -2, -1) x 34,639,853 ops/sec ±1.51% (91 runs sampled)
cached slice.call(testArray, -2, -1) x 35,771,881 ops/sec ±0.63% (98 runs sampled)
sliced(testArray, -2, -1) x 38,169,503 ops/sec ±0.23% (101 runs sampled)
fastest is [ 'sliced(testArray, -2, -1)' ]
